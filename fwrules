#! /bin/sh

# Stop on unexpected errors
set -e

# Paths
etcdir=/etc/fwrules
rundir=/run/fwrules
rulesets="$etcdir/rulesets"
committed="$etcdir/committed"
pending="$etcdir/pending"
history="$etcdir/history"
current="$rundir/current"

# Output usage to stdout
print_usage () {
    local name
    name=$(basename "$0")
    cat <<EOS
$name - Simple management of iptables rules and rulesets
usage:
    $name [options] start|stop
    $name [options] enable|disable <ruleset>
    $name [options] insert|append|delete <seqno> <command>
    $name [options] try|commit
    $name [options] restore previous|list|<snapshot>
    $name [options] run start|stop|<mode> <ruleset>...
    $name [options] help|-h

commands:
    start   apply the latest committed configuration
            (invoked by systemd when starting fwrules.service)
    stop    stop by tearing down the rules
    enable  enable the specified ruleset
    disable disable the specified ruleset
    insert  insert a single command with the specified sequence number
    append  append a single command with the specified sequence number
    delete  delete a single command with the specified sequence number
    try     apply the pending configuration temporarily and optionally commit
            (old configuration is restored after a timeout or on reboot)
    commit  apply and commit the pending configuration permanently
    restore restore or list earlier committed configurations
    run     run the the specified rulesets in specified mode
            (for experimenting only, does not update permanent configuration)
    help    print this help and exit

options:
    -v      verbose mode, display the executed rules etc (repeat for very verbose)
    -h      print this help and exit
EOS
}

# Apply specified rule file
# $1 - start|stop|<other mode>
# $2 - ruleset file to apply
apply_fwr () {
    local reqmode ruleset curmode backends backend table tableopt rule cmd ret
    reqmode="$1"
    ruleset="$2"
    [ $verbose = false ] || echo "INFO: Applying mode '$reqmode' of ruleset $ruleset"
    curmode="start"
    [ $verbose != very ] || echo "DEBUG: Current mode: $curmode"
    ret=0
    backends=
    table=
    grep -E '^\s*[^\s#]' < "$ruleset" | sed -e 's/^\s\s*//' -e 's/\s\s*$//' | while read rule; do
        # Handle specials
        case "$rule" in

            # Backend(s) specification
            '|'*)
                backends="${rule#'|'}"
                [ $verbose != very ] || echo "DEBUG: Current backends: $backends"
                continue
                ;;

            # Table specification
            '*'*)
                table="${rule#'*'}"
                [ $verbose != very ] || echo "DEBUG: Current table: $table"
                continue
                ;;

            # Mode specifier (start|stop|<other mode>)
            !*)
                curmode="${rule#'!'}"
                [ $verbose != very ] || echo "DEBUG: Current mode: $curmode"
                continue
                ;;

            # Reserve some specific special characters for future use
            [\$%]*)
                echo "ERROR: Ignoring rule starting with a reserved character: $rule" 1>&2
                echo 'Hint: Add "--" as the first word on rule to pass it on to the backend as is.'
                ret=1
                continue
                ;;

            '--'[\ \t]*)
                rule=$(echo "$rule" | sed -e 's/^--\s\s*//')
                ;;
        esac

        # Check backends
        if [ -z "$backends" ]; then
            echo "ERROR: Backend(s) not specified, ignoring rule: $rule" 1>&2
            echo 'Hint: Insert line "|iptables", "|ip6tables", or "|iptables ip6tables" at the top of the rule file.' 1>&2
            ret=1
            continue
        fi

        # Set table option
        tableopt=
        if [ -n "$table" ]; then
            tableopt="-t $table"
        fi

        # Check if rule should be skipped
        if [ "$curmode" != "$reqmode" ]; then
            [ $verbose != very ] || echo "DEBUG: Skipping mode '$curmode' rule: $tableopt $rule"
            continue
        fi

        # Apply rule
        for backend in $backends; do
            cmd="$backend $tableopt $rule"
            [ $verbose = false ] || echo "INFO: Applying command: $cmd"
            if ! eval "$cmd"; then
                echo "ERROR: Command failed: $cmd" 1>&2
                ret=1
            fi
        done

    done
    return $ret
}

# Runs the specified rulesets
# $1 - start|stop
# $2 - ruleset directory or file
do_run () {
    local lsopt f ret
    if [ ! -e "$2" ]; then
        echo "ERROR: File does not exist: $2" 1>&2
        return 1
    elif [ -d "$2" ]; then
        ret=0
        lsopt=
        if [ "$1" = stop ]; then
            lsopt='-r'
        fi
        ls -1 $lsopt "$2" | while read f; do
            if ! do_run "$1" "$2/$f"; then
                ret=1
            fi
        done
        return $ret
    elif [ -f "$2" ]; then
        if [ "$2" = "${2%.fwr}.fwr" ]; then
            if [ -x "$2" ]; then
                echo "WARNING: FWR ruleset should not be marked executable: $2" 1>&2
            fi
            apply_fwr "$1" "$2" || {
                echo "ERROR: Ruleset failed: $2" 1>&2
                return 1
            }
            return 0
        elif [ -x "$2" ]; then
            "$2" "$1" || {
                echo "ERROR: Ruleset failed with status code $?: $2" 1>&2
                return 1
            }
            return 0
        fi
    fi
    echo "ERROR: Skipping unsupported non-executable ruleset item: $2" 1>&2
    echo 'Hint: Use files named as *.fwr or executable files.' 1>&2
    return 1
}

# Start service by applying committed configuration
do_start () {
    if [ -d "$committed" ]; then
        mkdir -p "$rundir"
        ln -s "$committed" "$current"
        do_run start "$committed"
    else
        echo "ERROR: No committed configuration found: $committed" 1>&2
        return 1
    fi
}

# Stop service by tearing down current configuration
do_stop () {
    local ret
    ret=0
    if [ -L "$current" ]; then
        if ! do_run stop "$(readlink "$current")"; then
            ret=1
        fi
        rm "$current"
    fi
    return $ret
}

# Enable ruleset
# $1 - ruleset
do_enable () {
    if [ -e "$rulesets/$1" ]; then
        if [ ! -e "$pending/$1" ]; then
            mkdir -p "$pending"
            ln -s "$rulesets/$1" "$pending/$(dirname "$1")"
        fi
    else
        echo "ERROR: Unknown ruleset: $1" 1>&2
        return 1
    fi
}

# Disable ruleset
# $1 - ruleset
do_disable () {
    if [ -e "$pending/$1" ]; then
        if [ -L "$pending/$1" ]; then
            rm "$pending/$1"
        else
            echo "ERROR: Can not disable non-linked ruleset: $1" 1>&2
            return 1
        fi
    fi
}

# Checks number of parameters
# $1 - actual number of parameters
# $2 - expected number of parameters
check_n_params () {
    if [ $1 -ne $2 ]; then
        echo 'ERROR: Unexpected number of parameters (try -h for help)' 1>&2
        exit 1
    fi
}

# Use secure umask
umask 022

# Check options and commands
verbose=false
while getopts hv opt; do
    case $opt in
        h)
            print_usage
            exit 0
            ;;
        v)
            if [ $verbose = false ]; then
                verbose=true
            else
                verbose=very
            fi
            ;;
        \?)
            print_usage 1>&2
            exit 1
            ;;
    esac
done
shift $(( $OPTIND - 1 ))
if [ $# -lt 1 ]; then
    print_usage 1>&2
    exit 1
fi
cmd="$1"
shift
case "$cmd" in
    help|-h)
        print_usage
        ;;
    run)
        if [ "$#" -lt 2 ]; then
            echo 'ERROR: Expected mode and ruleset(s) as parameters' 1>&2
            exit 1
        fi
        mode="$1"
        shift
        ret=0
        for rs in "$@"; do
            case "$rs" in
                */*)
                    if ! do_run "$mode" "$rs"; then
                        ret=1
                    fi
                    ;;
                *)
                    if ! do_run "$mode" "$rulesets/$rs"; then
                        ret=1
                    fi
                    ;;
            esac
        done
        exit $ret
        ;;
    start)
        check_n_params $# 0
        do_stop || true
        do_start
        ;;
    stop)
        check_n_params $# 0
        do_stop
        ;;
    try|commit)
        func="do_$cmd"
        check_n_params $# 0
        "$func" "$@"
        ;;
    enable|disable|restore)
        func="do_$cmd"
        check_n_params $# 1
        "$func" "$@"
        ;;
    insert|append|delete)
        func="do_$cmd"
        check_n_params $# 2
        "$func" "$@"
        ;;
    *)
        echo "ERROR: Unrecognized command: $1" 1>&2
        exit 1
        ;;
esac

exit 0
